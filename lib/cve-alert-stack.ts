import * as cdk from '@aws-cdk/core';
import * as lambda from '@aws-cdk/aws-lambda-nodejs';
import * as iam from '@aws-cdk/aws-iam';
import { Rule, Schedule } from '@aws-cdk/aws-events';
import * as targets from '@aws-cdk/aws-events-targets';

export class CveAlertStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const alertFunction = new lambda.NodejsFunction(this, 'cve-alert-function', {
      environment: {
        LOG_LEVEL: 'DEBUG',
        POWERTOOLS_SERVICE_NAME: "cve-alert-service",
        SES_RECEPIENTS: "recepient1@example.com,recepient2@example.com",
        SES_SENDER: "sender@example.com"
      }
    });

    alertFunction.role?.attachInlinePolicy(new iam.Policy(this,"update-function-configuration-policy",{
      statements: [
        new iam.PolicyStatement({
          actions: ["lambda:UpdateFunctionConfiguration"],
          resources: [alertFunction.functionArn]
        })
      ]
    }))

    alertFunction.role?.attachInlinePolicy(new iam.Policy(this,"ses-policy",{
      statements: [
        new iam.PolicyStatement({
          actions: ["ses:SendEmail"],
          resources: [`arn:aws:ses:${cdk.Stack.of(this).region}:${cdk.Stack.of(this).account}:identity/*`]
        })
      ]
    }))

    new Rule(this, 'cve-alert-schedule', {
      schedule: Schedule.cron({ minute: '0' }),
      targets: [new targets.LambdaFunction(alertFunction)],
     });
     

  }
}
